#!/bin/sh

# Author: Radek Slaby, jakjinak (https://github.com/jakjinak)
# This work is licensed under the terms of the GNU GPL, version 2.

# Based on original script downloaded from https://wiki.qemu.org/Documentation/Networking/NAT credited as:
#  >  Copyright IBM, Corp. 2010  
#
#  >  Authors:
#  >   Anthony Liguori <aliguori@us.ibm.com>
#
#  >  This work is licensed under the terms of the GNU GPL, version 2.  See
#  >  the COPYING file in the top-level directory.

# The main difference is that ifconfig (which is deprecated) has been replaced with ip.

######################################
# configuration section

# name of the bridge interface to use
BRIDGE_IF='qbr0'
# the common part of the IP address (just to be used as variable in subseqent definitions)
NETWORK_STEM='192.168.50'
# the full network IP
NETWORK="$NETWORK_STEM.0"
# number of bits for the network part of the bridge interface
NETWORK_STEM_LENGHT=24
# the network mask equivalent to the NETWORK_STEM_LENGHT
NETWORK_MASK='255.255.255.0'
# the IP address of the network gateway in the network (ie. IP address of the bridge interface
NETWORK_GW="$NETWORK_STEM.1"
# the range (within the network) to assign DHCP leases from
NETWORK_DHRANGE="$NETWORK_STEM.2,$NETWORK_STEM.254"

# DO NOT MODIFY BELOW HERE
######################################
# tool availability checks
check_tool()
{ [ "$1" ] && [ -x "$1" ] && return 0
  echo -e "Cannot locate \e[1m"`basename "$1"`"\e[0m tool."
  echo -e "You might need to install \e[1m$2\e[0m package."
  [ "$3" -gt 0 ] && return 1
  echo "Cannot continue!"
  exit 1
}

TOOL_IP=`which ip`
TOOL_BRCTL=`which brctl`
TOOL_IPTABLERESTORE=`which iptables-restore`
TOOL_DNSMASQ=`which dnsmasq`

check_tool "$TOOL_IP" iproute2
check_tool "$TOOL_BRCTL" bridge-utils # TODO replace brctl with bridge (also from iproute2)
check_tool "$TOOL_IPTABLERESTORE" iptables
check_tool "$TOOL_DNSMASQ" dnsmasq

######################################
# actual script starts here
#set -x

# first check (and create if necessary) the bridge interface
if "$TOOL_IP" link show "$BRIDGE_IF" > /dev/null 2> /dev/null
then
  # check that it is running
  { "$TOOL_IP" link show up | grep " $BRIDGE_IF:" > /dev/null 2> /dev/null ; } || { echo "Interface $BRIDGE_IF installed, but not running. Delete ($TOOL_IP link del $BRIDGE_IF) or fix it and retry." ; exit 1 ; }
else
  # create interface
  "$TOOL_IP" link add name "$BRIDGE_IF" type bridge || exit 1
  "$TOOL_IP" address add $NETWORK_GW/$NETWORK_STEM_LENGHT dev "$BRIDGE_IF" || exit 1
  "$TOOL_BRCTL" stp "$BRIDGE_IF" off || exit 1
  "$TOOL_BRCTL" setfd "$BRIDGE_IF" 0 || exit 1

  # bring the bridge interface up
  "$TOOL_IP" link set dev "$BRIDGE_IF" up || exit 1

  # make sure ip forward is enabled
  IPFORWARD=`cat /proc/sys/net/ipv4/ip_forward`
  [ "$IPFORWARD" = 1 ] || echo 1 > /proc/sys/net/ipv4/ip_forward

  # install forwarding rules
  cat << EOF | "$TOOL_IPTABLERESTORE"
# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
*nat
:PREROUTING ACCEPT [61:9671]
:POSTROUTING ACCEPT [121:7499]
:OUTPUT ACCEPT [132:8691]
-A POSTROUTING -s $NETWORK/$NETWORK_MASK -j MASQUERADE
COMMIT
# Completed on Fri Aug 24 15:20:25 2007
# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
*filter
:INPUT ACCEPT [1453:976046]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1605:194911]
-A INPUT -i $BRIDGE_IF -p tcp -m tcp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE_IF -p udp -m udp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE_IF -p tcp -m tcp --dport 53 -j ACCEPT
-A INPUT -i $BRIDGE_IF -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -i $BRIDGE_IF -o $BRIDGE_IF -j ACCEPT
-A FORWARD -s $NETWORK/$NETWORK_MASK -i $BRIDGE_IF -j ACCEPT
-A FORWARD -d $NETWORK/$NETWORK_MASK -o $BRIDGE_IF -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o $BRIDGE_IF -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -i $BRIDGE_IF -j REJECT --reject-with icmp-port-unreachable
COMMIT
# Completed on Fri Aug 24 15:20:25 2007
EOF

  if [ "$NETWORK_DHRANGE" ]
  then
    "$TOOL_DNSMASQ" --strict-order --except-interface=lo --interface=$BRIDGE_IF \
        --listen-address=$NETWORK_GW --bind-interfaces --dhcp-range=$NETWORK_DHRANGE --conf-file='' \
        --pid-file=/var/run/${BRIDGE_IF}-dnsmasq.pid --dhcp-leasefile=/var/run/${BRIDGE_IF}-dnsmasq.leases \
        --dhcp-no-override
  fi
fi

if [ "$1" ]
then
  "$TOOL_IP" link set dev "$1" up || exit 1
  "$TOOL_IP" link set dev "$1" master "$BRIDGE_IF" || exit 1
else
  exit 1
fi
